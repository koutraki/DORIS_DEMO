/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package doris;

import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mary
 */
public class alignmentInterface extends javax.swing.JFrame {

    /**
     * Creates new form pathAlignment
     */
    public alignmentInterface() {
        initComponents();
        myInitComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        overlapTh = new javax.swing.JComboBox();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        image = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        graphical = new javax.swing.JButton();
        text = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DORIS - Alignments");
        setName("DORIS - Paths Alignment"); // NOI18N

        table.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "KB", "WS", "overlap", "KB -> WS", "KB<- WS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(table);

        overlapTh.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0.5", "0.6", "0.7", "0.8" }));
        overlapTh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overlapThActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0.1", "0.4", "0.5", "0.7" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel5.setText("Paths Alignment ");

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel6.setText("Entity and Property Discovery");

        jLabel1.setText("Overlap threshold:");

        jLabel2.setText("ARM threshold:");

        jButton2.setText("Go!");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        graphical.setText("Graphical");
        graphical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphicalActionPerformed(evt);
            }
        });

        text.setText("Text");
        text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textActionPerformed(evt);
            }
        });

        jLabel3.setText("API:");

        jLabel4.setText("Web Service:");

        jLabel7.setText("Knowledge Base:");

        jLabel8.setText("jLabel8");

        jLabel9.setText("jLabel9");

        jLabel10.setText("jLabel10");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                .add(text)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .addContainerGap()
                                        .add(jLabel6))
                                    .add(layout.createSequentialGroup()
                                        .add(260, 260, 260)
                                        .add(image))))
                            .add(layout.createSequentialGroup()
                                .add(45, 45, 45)
                                .add(jLabel12)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 511, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 380, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jSeparator1)
                            .add(jSeparator2)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(6, 6, 6)
                                        .add(graphical))
                                    .add(jLabel5)
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel3)
                                        .add(18, 18, 18)
                                        .add(jLabel8)
                                        .add(41, 41, 41)
                                        .add(jLabel4)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                        .add(jLabel9)
                                        .add(33, 33, 33)
                                        .add(jLabel7)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jLabel10))
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel1)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(overlapTh, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(18, 18, 18)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(layout.createSequentialGroup()
                                                .add(6, 6, 6)
                                                .add(jButton2))
                                            .add(layout.createSequentialGroup()
                                                .add(jLabel2)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(jComboBox2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                                .add(0, 0, Short.MAX_VALUE))
                            .add(jScrollPane2))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(jLabel8)
                    .add(jLabel4)
                    .add(jLabel9)
                    .add(jLabel7)
                    .add(jLabel10))
                .add(18, 18, 18)
                .add(jLabel5)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(overlapTh, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2)
                    .add(jComboBox2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 233, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(38, 38, 38)
                .add(jLabel6)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(graphical)
                    .add(text))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(image)
                        .add(28, 28, 28))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(18, 18, 18)
                                .add(jLabel12))
                            .add(layout.createSequentialGroup()
                                .add(1, 1, 1)
                                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 198, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void myInitComponents() {
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jLabel8.setText(Introduction.api);
        jLabel9.setText(Introduction.function);
        jLabel10.setText(Introduction.kb);
    }

    private void overlapThActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overlapThActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_overlapThActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        DefaultTableModel myTableModel = (DefaultTableModel) this.table.getModel();
        while (myTableModel.getRowCount() > 0) {
            myTableModel.removeRow(0);
        }

        float overlapThreshold = Float.valueOf(overlapTh.getSelectedItem().toString());
        float ARMThreshold = Float.valueOf(jComboBox2.getSelectedItem().toString());

        String pathAlignmentFilePath = Constants.projectFolder + Introduction.kb + "/resultsPathAlignment/100_"
                + Introduction.function + "_" + Introduction.api + "_Pairs.txt";
        String classRelationAlignment = Constants.projectFolder + Introduction.kb + "/ClassAlignmentNewFormV2/100_"
                + Introduction.function + "_" + Introduction.api + "_Solution.txt";

        String pathARMKBtoWS = Constants.projectFolder + Introduction.kb + "/ARMPathAlignmentResults/KBImpliesXML/100_"
                + Introduction.function + "_" + Introduction.api + "_Pairs.txt";
        String pathARMWStoKB = Constants.projectFolder + Introduction.kb + "/ARMPathAlignmentResults/XMLImpliesKB/100_"
                + Introduction.function + "_" + Introduction.api + "_Pairs.txt";

        ArrayList<String> p1p2 = parsePathAlignmentFile(pathAlignmentFilePath, overlapThreshold);

        boolean isKbImpliesWS = true;
        parseARMFile(pathARMKBtoWS, ARMThreshold, true, p1p2); // for KBtoWS isKbImpliesWS=true
        parseARMFile(pathARMWStoKB, ARMThreshold, false, p1p2);


    }//GEN-LAST:event_jButton2ActionPerformed

    private void graphicalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphicalActionPerformed

        String imagePath = Constants.projectFolder + Introduction.kb + "/graphviz/" + Introduction.function + "_" + Introduction.api + "_fig.png";

        ImageIcon imageIcon = new ImageIcon(imagePath);
        Image image = imageIcon.getImage();
        Image newimg = image.getScaledInstance(120, 120, java.awt.Image.SCALE_SMOOTH);
        imageIcon = new ImageIcon(newimg);
        jLabel12.setIcon(imageIcon);
        jLabel12.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                // you can open a new frame here as
                // i have assumed you have declared "frame" as instance variable
                java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        new classRelAlignments2().setVisible(true);
                    }
                });

            }
        });

    }//GEN-LAST:event_graphicalActionPerformed

    public static BufferedImage resize(BufferedImage image, int width, int height) {
        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TRANSLUCENT);
        Graphics2D g2d = (Graphics2D) bi.createGraphics();
        g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
        g2d.drawImage(image, 0, 0, width, height, null);
        g2d.dispose();
        return bi;
    }

    private void textActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textActionPerformed
        // TODO add your handling code here:

        //parse file of class alignemnts results
        String pathClassAlignment = Constants.projectFolder + Introduction.kb + "/ClassAlignmentNewFormV2/100_"
                + Introduction.function + "_" + Introduction.api + "_Solution.txt";

        String text = new String();
        BufferedReader br = null;
        try {
            br = new BufferedReader(new InputStreamReader(new FileInputStream(pathClassAlignment), "UTF8"));
            String line;

            int i = 0;
            while ((line = br.readLine()) != null) {

                if (i < 2) {
                    i++;
                    continue;
                } else {
                    text += line + "\n";
                }

            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Introduction.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(Introduction.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Introduction.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                br.close();
            } catch (IOException ex) {
                Logger.getLogger(Introduction.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        System.out.println(text);
        jTextArea1.setText(text);


    }//GEN-LAST:event_textActionPerformed

    public ArrayList<String> parsePathAlignmentFile(String path, float overlapThreshold) {
        ArrayList<String> p1p2 = new ArrayList<String>();

        DecimalFormat df = new DecimalFormat();
        df.setMaximumFractionDigits(2);

        BufferedReader br = null;
        try {
            br = new BufferedReader(new InputStreamReader(new FileInputStream(path), "UTF8"));
            String line;
            int i = 0;
            while ((line = br.readLine()) != null) {
                //   System.out.println("mpike 1");
                String[] parts = line.split(Constants.separatorSpace);
                i++;
                float overlapValue = Float.parseFloat(parts[2]);
                if (overlapThreshold <= overlapValue) {
                    DefaultTableModel model = (DefaultTableModel) table.getModel();
                    model.addRow(new Object[]{parts[0], parts[1], df.format(overlapValue)});

                    p1p2.add(parts[0] + "+" + parts[1]);
                    //   table.setValueAt(parts[0], i, 1);
                    //   table.setValueAt(parts[1], i, 2);
                } else {
                    break;
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Introduction.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(Introduction.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Introduction.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                br.close();
            } catch (IOException ex) {
                Logger.getLogger(Introduction.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return p1p2;
    }

    public void parseARMFile(String path, float ARMThreshold, boolean isKbImpliesWS, ArrayList<String> p1p2) {

        DecimalFormat df = new DecimalFormat();
        df.setMaximumFractionDigits(2);

        HashMap<String, Float> pathsAndValue = new HashMap<String, Float>();

        BufferedReader br = null;
        try {
            br = new BufferedReader(new InputStreamReader(new FileInputStream(path), "UTF8"));
            String line;

            while ((line = br.readLine()) != null) {
                //   System.out.println("mpike 1");
                String[] parts = line.split(Constants.separatorSpace);

                float ARMValue = Float.parseFloat(parts[2]);

                if (ARMThreshold <= ARMValue) {

                    String paths = (isKbImpliesWS) ? parts[0] + "+" + parts[1] : parts[1] + "+" + parts[0];

                    pathsAndValue.put(paths, ARMValue);
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Introduction.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(Introduction.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Introduction.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                br.close();
            } catch (IOException ex) {
                Logger.getLogger(Introduction.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        int i = 0;
        int tableColumn = (isKbImpliesWS) ? 3 : 4;
        for (String pathpair : p1p2) {
            System.out.println(pathpair);
            if (pathsAndValue.containsKey(pathpair)) {
                Float value = pathsAndValue.get(pathpair);
                table.setValueAt(df.format(value), i, tableColumn);
            } else {
                table.setValueAt("--", i, tableColumn);
            }
            i++;
        }

    }

    /**
     * @param args the command line arguments
     */
  //  public static void main(String args[]) {
        /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(alignmentInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(alignmentInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(alignmentInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(alignmentInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
    //</editor-fold>
    //</editor-fold>
    //</editor-fold>
    //</editor-fold>
    //</editor-fold>
    //</editor-fold>
    //</editor-fold>
    //</editor-fold>

    /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new alignmentInterface().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton graphical;
    private javax.swing.JLabel image;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JComboBox overlapTh;
    private javax.swing.JTable table;
    private javax.swing.JButton text;
    // End of variables declaration//GEN-END:variables
}
